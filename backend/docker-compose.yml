services:
  app: # Your Go application service
    build:
      context: . # Build from the Dockerfile in the current directory
      dockerfile: Dockerfile
    container_name: url-analyzer-app
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080
    environment: # Pass environment variables to your Go application container
      DB_USER: ${DB_USER} # Reads from your .env file
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db # The name of the database service within the Docker Compose network
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy #
    env_file: # Load environment variables from your .env file
      - ./.env

  db: # Your MySQL database service
    image: mysql/mysql-server:8.0
    container_name: url-analyzer-mysql
    ports:
      - "3306:3306"
    environment: # This is correct for MySQL image initial setup
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    env_file:
      - ./.env
    healthcheck: # <-- FIX: This 'healthcheck' block needs to be OUTSIDE the 'environment' block,
                 #           at the same level as 'image', 'container_name', 'environment', etc.
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD"] # Your test command is correct
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s 

# Define named volumes for persistent data
volumes:
  db_data: # This volume will store MySQL's data persistently